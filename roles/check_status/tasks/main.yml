---
- name: Check if service is running
  check_mode: true
  ansible.builtin.systemd_service:
    state: started
    name: "{{ service_issue }}"
  register: service_status

- name: Check if service is running
  ansible.builtin.debug:
    msg: "{{ service_status }}"

- name: Check if service is running
  ansible.builtin.debug:
    msg: "{{ service_status.status.ActiveState if service_status.status.ActiveState is defined else 'ActiveState not found' }}"

- name: Retrieve last 20 lines of service logs
  ansible.builtin.command: journalctl -u {{ service_issue }}.service -n 20
  register: service_logs
  ignore_errors: true
  when: service_status.changed

- name: Store service logs as a variable
  ansible.builtin.set_fact:
    service_log_output: "{{ service_logs.stdout }}"
  when: service_status.changed

- name: Escape newlines in systemd logs
  ansible.builtin.set_fact:
    systemd_log_output_escaped: "{{ service_log_output | regex_replace('(\r?\n)', '\\\\n') }}"
  when: service_status.changed

- name: Display service logs
  ansible.builtin.debug:
    msg: "{{ service_log_output }}"
  when: service_status.changed

- name: Set stats for next controller job
  ansible.builtin.set_stats:
    data:
      gpt_prompt: >-
        \n### Instructions:\nA system service is failing on {{ vm_name }}. Below are the logs. Provide a single, concise fix instruction (1-2 lines), add restart of service.\n
        \n### Logs:\n{{ systemd_log_output_escaped }}\n
        \n### Fix:\n
      service_log_output: "\"{{ service_logs.stdout }}\""
      max_tokens: 2000
  when: service_status.changed
